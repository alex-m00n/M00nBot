<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logs | M00nBotüåôü§ñ</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-900 text-white">
    <div class="flex">
        <!-- Main Content -->
        <div class="flex-1">
            <main class="p-8">
                <div class="max-w-6xl mx-auto">
                    <!-- Filtres -->
                    <div class="bg-gray-800 rounded-lg p-4 mb-6">
                        <div class="flex flex-wrap gap-4">
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-400 mb-2">Type de log</label>
                                <select id="logType" class="bg-gray-700 text-white px-4 py-2 rounded w-full">
                                    <option value="all">Tous les logs</option>
                                    <option value="message">Messages</option>
                                    <option value="command">Commandes</option>
                                    <option value="guild">Serveur</option>
                                    <option value="moderation">Mod√©ration</option>
                                </select>
                            </div>
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-400 mb-2">Salon</label>
                                <select id="guildFilter" class="bg-gray-700 text-white px-4 py-2 rounded w-full">
                                    <option value="all">Tous les salons</option>
                                    <% guilds.forEach(channel => { %>
                                        <option value="<%= channel.id %>"><%= channel.name %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-400 mb-2">P√©riode</label>
                                <select id="timeFilter" class="bg-gray-700 text-white px-4 py-2 rounded w-full">
                                    <option value="1h">Derni√®re heure</option>
                                    <option value="24h">24 derni√®res heures</option>
                                    <option value="7d">7 derniers jours</option>
                                    <option value="30d">30 derniers jours</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Liste des logs -->
                    <div class="bg-gray-800 rounded-lg p-4">
                        <div class="space-y-4" id="logsList">
                            <!-- Les logs seront charg√©s ici dynamiquement -->
                        </div>
                        <div class="mt-4 flex justify-between items-center">
                            <button id="loadMoreBtn" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
                                <i class="fas fa-sync-alt mr-2"></i>Charger plus
                            </button>
                            <span id="logCount" class="text-gray-400">0 logs affich√©s</span>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let isLoading = false;
        let hasMore = true;

        // Fonction pour formater la date
        function formatDate(date) {
            return new Date(date).toLocaleString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Fonction pour obtenir l'ic√¥ne en fonction du type de log
        function getLogIcon(type) {
            switch(type) {
                case 'message': return 'fa-comment';
                case 'command': return 'fa-terminal';
                case 'guild': return 'fa-server';
                case 'moderation': return 'fa-shield-alt';
                default: return 'fa-info-circle';
            }
        }

        // Fonction pour obtenir la couleur en fonction du type de log
        function getLogColor(type) {
            switch(type) {
                case 'message': return 'blue';
                case 'command': return 'green';
                case 'guild': return 'purple';
                case 'moderation': return 'red';
                default: return 'gray';
            }
        }

        // Fonction pour charger les logs
        async function loadLogs(reset = false) {
            if (isLoading || (!hasMore && !reset)) return;
            
            if (reset) {
                currentPage = 1;
                document.getElementById('logsList').innerHTML = '';
                hasMore = true;
            }

            isLoading = true;
            const type = document.getElementById('logType').value;
            const guild = document.getElementById('guildFilter').value;
            const time = document.getElementById('timeFilter').value;

            try {
                const response = await fetch(`/api/activity?page=${currentPage}&type=${type}&guild=${guild}&time=${time}`);
                const data = await response.json();

                if (data.activities.length === 0) {
                    hasMore = false;
                    if (currentPage === 1) {
                        document.getElementById('logsList').innerHTML = '<p class="text-gray-400 text-center">Aucun log trouv√©</p>';
                    }
                } else {
                    const logsHtml = data.activities.map(log => `
                        <div class="bg-gray-700 rounded-lg p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 rounded-full bg-${getLogColor(log.type)}-600 flex items-center justify-center">
                                        <i class="fas ${getLogIcon(log.type)}"></i>
                                    </div>
                                </div>
                                <div class="ml-4 flex-1">
                                    <div class="flex items-center justify-between">
                                        <h4 class="text-lg font-semibold">${log.description}</h4>
                                        <span class="text-sm text-gray-400">${formatDate(log.timestamp)}</span>
                                    </div>
                                    ${log.data.guildId ? `
                                        <p class="text-sm text-gray-400 mt-1">
                                            <i class="fas fa-server mr-1"></i>
                                            Serveur: ${log.data.guildName || log.data.guildId}
                                        </p>
                                    ` : ''}
                                    ${log.data.channelId ? `
                                        <p class="text-sm text-gray-400 mt-1">
                                            <i class="fas fa-hashtag mr-1"></i>
                                            Salon: ${log.data.channelName || log.data.channelId}
                                        </p>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    `).join('');

                    if (reset) {
                        document.getElementById('logsList').innerHTML = logsHtml;
                    } else {
                        document.getElementById('logsList').insertAdjacentHTML('beforeend', logsHtml);
                    }

                    document.getElementById('logCount').textContent = `${data.pagination.total} logs au total`;
                    hasMore = data.pagination.hasMore;
                    currentPage++;
                }
            } catch (error) {
                console.error('Erreur lors du chargement des logs:', error);
                showToast('Erreur lors du chargement des logs', 'error');
            }

            isLoading = false;
        }

        // √âcouteurs d'√©v√©nements pour les filtres
        document.getElementById('logType').addEventListener('change', () => loadLogs(true));
        document.getElementById('guildFilter').addEventListener('change', () => loadLogs(true));
        document.getElementById('timeFilter').addEventListener('change', () => loadLogs(true));
        document.getElementById('loadMoreBtn').addEventListener('click', () => loadLogs());

        // Charger les logs au chargement de la page
        loadLogs();

        // Mise √† jour en temps r√©el avec Socket.IO
        const socket = io();
        socket.on('activityUpdate', (data) => {
            if (document.getElementById('logType').value === 'all' || 
                data.activities.some(activity => activity.type === document.getElementById('logType').value)) {
                loadLogs(true);
            }
        });

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg text-white ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 
                'bg-blue-600'
            }`;
            toast.textContent = message;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 3000);
        }
    </script>
</body>
</html> 