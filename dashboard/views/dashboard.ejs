<%- contentFor('body') %>

<div class="max-w-6xl mx-auto">
    <!-- Informations du serveur -->
    <div class="bg-gray-800 rounded-lg p-6 mb-8">
        <div class="flex items-center">
            <% if (guild && guild.icon) { %>
                <img src="https://cdn.discordapp.com/icons/<%= guild.id %>/<%= guild.icon %>.png"
                    alt="<%= guild.name %>" class="w-16 h-16 rounded-full">
            <% } else { %>
                <div class="w-16 h-16 rounded-full bg-gray-700 flex items-center justify-center">
                    <i class="fas fa-server text-2xl"></i>
                </div>
            <% } %>
            <div class="ml-4">
                <h3 class="text-xl font-semibold">
                    <%= guild ? guild.name : 'Serveur' %>
                </h3>
                <p class="text-gray-400">ID: <%= guild ? guild.id : 'Chargement...' %></p>
            </div>
        </div>
    </div>

    <!-- Statistiques -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-gray-800 rounded-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-600 bg-opacity-75">
                    <i class="fas fa-users text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-400">Membres</p>
                    <p class="text-2xl font-semibold" id="usersCount">-</p>
                </div>
            </div>
        </div>
        <div class="bg-gray-800 rounded-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-600 bg-opacity-75">
                    <i class="fas fa-terminal text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-400">Commandes</p>
                    <p class="text-2xl font-semibold" id="commandsCount">-</p>
                </div>
            </div>
        </div>
        <div class="bg-gray-800 rounded-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-yellow-600 bg-opacity-75">
                    <i class="fas fa-clock text-2xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-400">Uptime</p>
                    <p class="text-2xl font-semibold" id="uptime">-</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Statut du bot -->
    <div class="bg-gray-800 rounded-lg p-6 mb-8">
        <h3 class="text-lg font-semibold mb-4">Statut du bot</h3>
        <div class="space-y-4">
            <div class="flex items-center space-x-4">
                <div class="flex items-center">
                    <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                    <span>En ligne</span>
                </div>
                <div class="text-gray-400">
                    <span>Ping: </span>
                    <span id="ping">-</span>
                    <span>ms</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Envoyer un message -->
    <div class="bg-gray-800 rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">Envoyer un message</h3>
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-400 mb-2">Salon</label>
                <select id="messageChannel" class="bg-gray-700 text-white px-4 py-2 rounded w-full">
                    <option value="">Sélectionnez un salon</option>
                    <% guild.channels.cache.filter(c => c.type === 0).forEach(channel => { %>
                        <option value="<%= channel.id %>">#<%= channel.name %></option>
                    <% }); %>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-400 mb-2">Message</label>
                <textarea id="messageContent" class="bg-gray-700 text-white px-4 py-2 rounded w-full h-32" placeholder="Entrez votre message..."></textarea>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-400 mb-2">Fichiers (max 8MB au total)</label>
                <input type="file" id="messageFiles" class="bg-gray-700 text-white px-4 py-2 rounded w-full" multiple>
                <div id="selectedFiles" class="mt-2"></div>
            </div>
            <button id="sendMessageBtn" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded w-full">
                <i class="fas fa-paper-plane mr-2"></i>Envoyer
            </button>
        </div>
    </div>
</div>

<%- contentFor('scripts') %>
<script>
    // Fonction pour formater l'uptime
    function formatUptime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days}j ${hours % 24}h`;
        if (hours > 0) return `${hours}h ${minutes % 60}m`;
        if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
        return `${seconds}s`;
    }

    // Fonction pour mettre à jour les statistiques
    async function updateStats() {
        try {
            const response = await fetch('/api/stats');
            const stats = await response.json();

            if (stats.error) {
                console.error('Erreur:', stats.error);
                return;
            }

            document.getElementById('usersCount').textContent = stats.users;
            document.getElementById('commandsCount').textContent = stats.commands;
            document.getElementById('uptime').textContent = formatUptime(stats.uptime);
            document.getElementById('ping').textContent = stats.ping;
        } catch (error) {
            console.error('Erreur lors de la récupération des statistiques:', error);
        }
    }

    // Mettre à jour les statistiques toutes les 30 secondes
    updateStats();
    setInterval(updateStats, 30000);

    // Mise à jour en temps réel avec Socket.IO
    const socket = io();
    socket.on('statsUpdate', (stats) => {
        if (!stats) return;

        // Mise à jour des statistiques de base
        if (stats.users) document.getElementById('usersCount').textContent = stats.users;
        if (stats.commands) document.getElementById('commandsCount').textContent = stats.commands;
        if (stats.uptime) document.getElementById('uptime').textContent = formatUptime(stats.uptime);
        if (stats.ping) document.getElementById('ping').textContent = stats.ping;
    });

    // Fonction pour mettre à jour l'affichage des fichiers sélectionnés
    function updateSelectedFiles() {
        const fileInput = document.getElementById('messageFiles');
        const selectedFilesDiv = document.getElementById('selectedFiles');
        selectedFilesDiv.innerHTML = '';

        if (fileInput.files.length > 0) {
            const totalSize = Array.from(fileInput.files).reduce((acc, file) => acc + file.size, 0);
            const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);

            const fileList = document.createElement('div');
            fileList.className = 'space-y-2';
            
            Array.from(fileInput.files).forEach(file => {
                const fileSize = (file.size / (1024 * 1024)).toFixed(2);
                const fileItem = document.createElement('div');
                fileItem.className = 'flex justify-between items-center bg-gray-700 p-2 rounded';
                fileItem.innerHTML = `
                    <span class="text-white">${file.name} (${fileSize} MB)</span>
                    <button type="button" class="text-red-500 hover:text-red-400" onclick="removeFile('${file.name}')">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                fileList.appendChild(fileItem);
            });

            const totalSizeElement = document.createElement('div');
            totalSizeElement.className = 'mt-2 text-gray-400 text-sm';
            totalSizeElement.textContent = `Taille totale: ${totalSizeMB} MB`;

            selectedFilesDiv.appendChild(fileList);
            selectedFilesDiv.appendChild(totalSizeElement);

            if (totalSize > 8 * 1024 * 1024) {
                const errorElement = document.createElement('div');
                errorElement.className = 'mt-2 text-red-500 text-sm';
                errorElement.textContent = 'La taille totale des fichiers ne doit pas dépasser 8MB';
                selectedFilesDiv.appendChild(errorElement);
            }
        }
    }

    // Fonction pour supprimer un fichier
    function removeFile(fileName) {
        const fileInput = document.getElementById('messageFiles');
        const dt = new DataTransfer();
        
        Array.from(fileInput.files).forEach(file => {
            if (file.name !== fileName) {
                dt.items.add(file);
            }
        });
        
        fileInput.files = dt.files;
        updateSelectedFiles();
    }

    // Ajouter l'événement pour mettre à jour l'affichage des fichiers
    document.getElementById('messageFiles').addEventListener('change', updateSelectedFiles);

    // Ajouter l'événement pour l'envoi du message
    document.getElementById('sendMessageBtn').addEventListener('click', async () => {
        const channelId = document.getElementById('messageChannel').value;
        const content = document.getElementById('messageContent').value;
        const files = document.getElementById('messageFiles').files;

        if (!channelId) {
            showToast('Veuillez sélectionner un salon', 'error');
            return;
        }

        if (!content && files.length === 0) {
            showToast('Veuillez entrer un message ou sélectionner des fichiers', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('channelId', channelId);
        if (content) formData.append('content', content);
        
        Array.from(files).forEach(file => {
            formData.append('files', file);
        });

        try {
            const response = await fetch('/api/send-message', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                showToast('Message envoyé avec succès', 'success');
                document.getElementById('messageContent').value = '';
                document.getElementById('messageFiles').value = '';
                document.getElementById('selectedFiles').innerHTML = '';
            } else {
                showToast(data.error || 'Erreur lors de l\'envoi du message', 'error');
            }
        } catch (error) {
            console.error('Erreur:', error);
            showToast('Erreur lors de l\'envoi du message', 'error');
        }
    });

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg text-white ${
            type === 'success' ? 'bg-green-600' :
            type === 'error' ? 'bg-red-600' :
            'bg-blue-600'
        }`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
</script>